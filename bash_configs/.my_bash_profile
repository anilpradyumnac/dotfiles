# #branch  in git repo
function parse_git_branch() {
 BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
 if [ ! "${BRANCH}" == "" ]
   then
   STAT=`parse_git_dirty`
   echo "[${BRANCH}${STAT}]"
 else
   echo ""
 fi
}

# get current status of git repo
function parse_git_dirty {
 status=`git status 2>&1 | tee`
 dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
 untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
 ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
 newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
 renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
 deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
 bits=''
 if [ "${renamed}" == "0" ]; then
   bits=">${bits}"
 fi
 if [ "${ahead}" == "0" ]; then
   bits="*${bits}"
 fi
 if [ "${newfile}" == "0" ]; then
   bits="+${bits}"
 fi
 if [ "${untracked}" == "0" ]; then
   bits="?${bits}"
 fi
 if [ "${deleted}" == "0" ]; then
   bits="x${bits}"
 fi
 if [ "${dirty}" == "0" ]; then
   bits="!${bits}"
 fi
 if [ ! "${bits}" == "" ]; then
   echo " ${bits}"
 else
   echo ""
 fi
}

export PS1="(\s):\u:-\W\`parse_git_branch\`\\$\\$\[\033[38;5;40m\] \[$(tput sgr0)\]"
# if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
#   __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
#   source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
# fi
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi

alias .loopBack_petlia='ssh -i petlaikey.pem ec2-user@54.67.104.228'
export PATH="/Users/apple/Library/Android/sdk/platform-tools":$PATH

alias .hubble_staging='ssh -i chaitanya.pem chaitanya@192.168.1.249'
export PATH="/Applications/Zed.app/bin":$PATH
export ALGORITHMIA_API_KEY='simyO5Vu3ocM1LzZuELniqU2TV21'

export GOPATH=~/go
export PATH=$PATH:$GOPATH/bin

test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

if [ -f ~/.config/exercism/exercism_completion.bash  ]; then
    . ~/.config/exercism/exercism_completion.bash
fi
alias .postgres_start='pg_ctl -D /usr/local/var/postgres start'
alias .postgres_stop='pg_ctl -D /usr/local/var/postgres stop'

export JAVA_HOME=$(/usr/libexec/java_home)
